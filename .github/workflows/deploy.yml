name: Deploy MindSync Infrastructure

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
      - 'lambda/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - 'lambda/**'

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            infrastructure/package-lock.json
            lambda/*/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          cd infrastructure && npm ci

      - name: Run tests
        run: npm test

      - name: Lint code
        run: npm run lint

  deploy-dev:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          cd infrastructure
          npm ci

      - name: CDK Bootstrap (if needed)
        run: |
          cd infrastructure
          npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}

      - name: CDK Deploy Development
        run: |
          cd infrastructure
          npx cdk deploy MindsyncDevStack --require-approval never
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET_DEV }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          GNEWS_API_KEY: ${{ secrets.GNEWS_API_KEY }}
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}

      - name: Post deployment notification
        if: success()
        run: |
          echo "âœ… Development deployment successful!"
          echo "ðŸ”— API URL: https://dev-api.mindsync.com"

  deploy-prod:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          cd infrastructure
          npm ci

      - name: CDK Diff Production
        run: |
          cd infrastructure
          npx cdk diff MindsyncProdStack

      - name: CDK Deploy Production
        run: |
          cd infrastructure
          npx cdk deploy MindsyncProdStack --require-approval never
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          GNEWS_API_KEY: ${{ secrets.GNEWS_API_KEY }}
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}

      - name: Post deployment notification
        if: success()
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "ðŸ”— API URL: https://api.mindsync.com"

  cleanup:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Cleanup preview environment
        run: |
          echo "ðŸ§¹ Cleaning up preview environment for PR #${{ github.event.number }}"
          # Add CDK destroy commands for preview environments if implemented
